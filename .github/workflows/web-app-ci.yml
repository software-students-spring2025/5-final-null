name: Web-App CI/CD
on:
  push:
    branches: [main, master, cicd]
    paths:
      - 'web-app/**'
      - '.github/workflows/web-app-ci.yml'
  pull_request:
    branches: [main, master]
    paths:
      - 'web-app/**'
      - '.github/workflows/web-app-ci.yml'

jobs:
  test:
    name: Test Web App
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web-app

    services:
      mongodb:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: secret
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: web-app/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          # Install wrapt first to ensure compatibility with Python 3.11
          pip install wrapt>=1.14.0
          pip install -r requirements.txt

      - name: Run tests with coverage
        env:
          MONGO_URI: mongodb://admin:secret@localhost:27017
          MONGO_DBNAME: test_bathroom_map
          SECRET_KEY: test_secret_key
          JWT_SECRET_KEY: test_jwt_secret_key
        run: pytest --cov=. --cov-report=xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: web-app/coverage.xml
          flags: web-app
          name: web-app-coverage

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    defaults:
      run:
        working-directory: web-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./web-app
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bathroom-map-webapp:latest

  deploy:
    name: Deploy to Digital Ocean
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Deploy to Digital Ocean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DIGITAL_OCEAN_HOST }}
          username: ${{ secrets.DIGITAL_OCEAN_USERNAME }}
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          script: |
            cd ~/bathroom-map
            docker-compose pull
            docker-compose up -d
            docker system prune -af 